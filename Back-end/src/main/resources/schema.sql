Use pharmacyapp;

-- Table spring_session
CREATE TABLE SPRING_SESSION (
	PRIMARY_ID CHAR(36) NOT NULL,
	SESSION_ID CHAR(36) NOT NULL,
	CREATION_TIME BIGINT NOT NULL,
	LAST_ACCESS_TIME BIGINT NOT NULL,
	MAX_INACTIVE_INTERVAL INT NOT NULL,
	EXPIRY_TIME BIGINT NOT NULL,
	PRINCIPAL_NAME VARCHAR(100),
	CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
);

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
	SESSION_PRIMARY_ID CHAR(36) NOT NULL,
	ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
	ATTRIBUTE_BYTES BLOB NOT NULL,
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
);

-- Table Users
CREATE TABLE Users (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(45) NOT NULL,
    middle_name VARCHAR(45) NULL,
    last_name VARCHAR(45) NOT NULL,
    email VARCHAR(45) NOT NULL,
    password VARCHAR(255) DEFAULT NULL,
    enabled BOOLEAN DEFAULT TRUE,
    not_locked BOOLEAN DEFAULT TRUE,
    using_mfa BOOLEAN DEFAULT TRUE,
    not_expired BOOLEAN DEFAULT TRUE,
    image_url VARCHAR(1000) NULL
    DEFAULT 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    phone VARCHAR(15) DEFAULT NULL,
    address VARCHAR(255) DEFAULT NULL,
    CONSTRAINT UQ_Users_Email UNIQUE (email)
);

-- Table Customers
CREATE TABLE Customers (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NULL,
    zip_code VARCHAR(20) NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table ImageData
CREATE TABLE ImageData (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL,
    image_data MEDIUMBLOB NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table Invoices
CREATE TABLE Invoices (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    customer_id INT UNSIGNED NOT NULL,
    amount INTEGER NOT NULL,
    due_date DATETIME NOT NULL,
    payment_status VARCHAR(255) DEFAULT 'PENDING',
    FOREIGN KEY (customer_id) REFERENCES Customers (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table Prescriptions
CREATE TABLE Prescriptions (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    customer_id INT UNSIGNED NOT NULL,
    doctor_name VARCHAR(255) NOT NULL,
    doctor_address VARCHAR(255) NOT NULL,
    issue_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customers (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table Medications
CREATE TABLE Medications (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    prescription_id INT UNSIGNED NOT NULL,
    name VARCHAR(255) NOT NULL,
    dosage VARCHAR(255) NOT NULL,
    frequency VARCHAR(255) NOT NULL,
    FOREIGN KEY (prescription_id) REFERENCES Prescriptions (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table Inventory
CREATE TABLE Inventory (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    medication_id INT UNSIGNED NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    quantity INT UNSIGNED NOT NULL,
    price INTEGER NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (medication_id) REFERENCES Medications (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table Roles
CREATE TABLE Roles (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    permission VARCHAR(500) NOT NULL,
    CONSTRAINT UQ_Roles_Name UNIQUE (name)
);

-- Table UserRoles
CREATE TABLE UserRoles (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    role_id INT UNSIGNED NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE RESTRICT,
    FOREIGN KEY (role_id) REFERENCES Roles (id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT UQ_UserRole_User_Id UNIQUE (user_id)
);

-- Table Confirmations
CREATE TABLE Confirmations (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    token VARCHAR(200) NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT UQ_Confirmations_User_Id UNIQUE (user_id),
    CONSTRAINT UQ_Confirmations_Token UNIQUE (token)
);

-- Table TwoFactorVerifications
CREATE TABLE TwoFactorVerifications (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    code VARCHAR(45) NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    expiration_date DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT UQ_TwoFactorVerifications_User_Id UNIQUE (user_id),
    CONSTRAINT UQ_TwoFactorVerifications_Code UNIQUE (code)
);

-- Table Events
CREATE TABLE Events (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    type VARCHAR(100) NOT NULL CHECK(type IN ('LOGIN_ATTEMPT', 'LOGIN_ATTEMPT_FAILED', 'LOGIN_ATTEMPT_SUCCESS',
    'PROFILE_UPDATE','PROFILE_PICTURE_UPDATE','ROLE_UPDATE', 'ACCOUNT_SETTINGS_UPDATE', 'MFA_UPDATE')),
    description VARCHAR(255) NULL,
    CONSTRAINT UQ_Events_Type UNIQUE (type)
);

-- Table UserEvents
CREATE TABLE UserEvents (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    event_id INT UNSIGNED NOT NULL,
    device VARCHAR(100) DEFAULT NULL,
    ip_address VARCHAR(250) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (event_id) REFERENCES Events (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table ResetPasswordVerifications
CREATE TABLE ResetPasswordVerifications (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    url VARCHAR(255) DEFAULT NULL,
    expiration_date DATETIME NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT UQ_ResetPasswordVerifications_User_Id UNIQUE (user_id),
    CONSTRAINT UQ_ResetPasswordVerifications_Url UNIQUE (url)
);

-- Insert new roles
INSERT INTO Roles (name, permission) VALUES
    ('ROLE_USER', 'READ:USER,READ:CUSTOMER'),
    ('ROLE_MANAGER', 'READ:USER,READ:CUSTOMER,CREATE:USER,DELETE:USER,DELETE:CUSTOMER,UPDATE:USER,UPDATE:CUSTOMER'),
    ('ROLE_ADMIN', 'READ:USER,READ:CUSTOMER,CREATE:USER,DELETE:USER,DELETE:CUSTOMER,UPDATE:USER,UPDATE:CUSTOMER'),
    ('ROLE_SYSADMIN', 'READ:USER,READ:CUSTOMER,CREATE:USER,CREATE:CUSTOMER,UPDATE:USER,UPDATE:CUSTOMER,DELETE:USER,DELETE:CUSTOMER,CREATE:INVOICE,CREATE:MEDICATION,CREATE:PRESCRIPTION,CREATE:INVENTORY,DELETE:INVOICE,DELETE:MEDICATION,DELETE:PRESCRIPTION,DELETE:INVENTORY,UPDATE:INVOICE,UPDATE:MEDICATION,UPDATE:PRESCRIPTION,UPDATE:INVENTORY');


-- Update Users
-- UPDATE Users SET image_url = CONCAT('https://randomuser.me/api/portraits/',
                      CASE WHEN RAND() < 0.5 THEN 'men/' ELSE 'women/' END,
                      FLOOR(RAND() * 100), '.jpg');
